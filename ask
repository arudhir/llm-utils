#!/usr/bin/env python3

import argparse
import os
import sys
import json
import anthropic
import openai

MODEL_MAPPING = {
    "sonnet35": "claude-3-5-sonnet-20240620",
    "opus3": "claude-3-opus-20240229",
    "sonnet3": "claude-3-sonnet-20240229",
    "haiku3": "claude-3-haiku-20240307",
    "gpt-4": "gpt-4",
    "gpt-4o": "gpt-4-turbo"
}

def load_systems(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return json.load(f)
    return {}

def call_claude(client, model, system_message, user_text, verbose):
    try:
        if verbose:
            print(f"Using model: {model}")
            print(f"System message: {system_message}")
            print(f"User message: {user_text}")
            print("Sending request to Claude...")
        
        response = client.messages.create(
            model=model,
            max_tokens=1000,
            system=system_message,
            messages=[
                {"role": "user", "content": user_text}
            ]
        )
        return response.content[0].text

    except Exception as e:
        raise RuntimeError(f"Error calling Claude: {str(e)}")

def call_gpt(model, system_message, user_text, verbose):
    try:
        if verbose:
            print(f"Using model: {model}")
            print(f"System message: {system_message}")
            print(f"User message: {user_text}")
            print("Sending request to GPT...")
        
        openai.api_key = os.getenv("OPENAI_API_KEY")
        if not openai.api_key:
            raise RuntimeError("OPENAI_API_KEY environment variable not set")

        messages = [{"role": "system", "content": system_message}] if system_message else []
        messages.append({"role": "user", "content": user_text})

        response = openai.ChatCompletion.create(
            model=model,
            messages=messages,
            max_tokens=1000
        )
        return response['choices'][0]['message']['content']

    except Exception as e:
        raise RuntimeError(f"Error calling GPT: {str(e)}")

def main():
    systems = load_systems('systems.json')

    parser = argparse.ArgumentParser(description="Command-line interface for AI APIs")
    parser.add_argument("text", help="The text to send to the model")
    parser.add_argument("--system", help="System message or predefined system name", default="")
    parser.add_argument("--model", help="Model to use", default="sonnet35",
                        choices=MODEL_MAPPING.keys())
    parser.add_argument("--verbose", action="store_true", help="Print additional information")

    args = parser.parse_args()

    # Check if the system arg is a predefined system name
    if args.system in systems:
        system_message = systems[args.system]
    else:
        system_message = args.system

    model_name = MODEL_MAPPING[args.model]

    if "claude" in model_name:
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            print("Error: ANTHROPIC_API_KEY environment variable not set", file=sys.stderr)
            sys.exit(1)
        client = anthropic.Anthropic(api_key=api_key)
        response = call_claude(client, model_name, system_message, args.text, args.verbose)

    elif "gpt" in model_name:
        response = call_gpt(model_name, system_message, args.text, args.verbose)

    else:
        print("Error: Unsupported model specified", file=sys.stderr)
        sys.exit(1)

    print(response)

if __name__ == "__main__":
    main()

